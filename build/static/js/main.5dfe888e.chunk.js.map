{"version":3,"sources":["QuestionCard.js","undraw_winners_ao2o 2.svg","Result.js","App.js","reportWebVitals.js","index.js"],"names":["QuestionCard","React","memo","options","questionData","updateCorrect","questionNo","choice","handleNext","useState","answer","setAnswer","answerStatus","setStatus","optionButtons","document","querySelectorAll","className","src","flag","alt","capital","map","val","onClick","e","target","classList","add","forEach","button","remove","disabled","selectedButton","querySelector","name","handleStatus","Result","correctAns","setCorrect","setQuestion_no","victoryImage","App","next","setNext","setData","setOption","setChoice","useEffect","rand","axios","get","then","res","data","Math","floor","random","newOption","push","length","x","indexOf","array","temporaryValue","randomIndex","currentIndex","shuffle","randomChoice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5dfe888e.chunk.js","sourcesContent":["import React, { useState} from 'react';\r\nimport './App.css';\r\n\r\nconst QuestionCard = React.memo(({options,questionData,updateCorrect,questionNo,choice,handleNext}) => {\r\n    const [answer, setAnswer] = useState(\" \");\r\n    const [answerStatus, setStatus] = useState(false);\r\n    const checkanswer = () => {\r\n        if (answer === questionData.name){\r\n            updateCorrect();\r\n        }\r\n    }\r\n    const optionButtons=document.querySelectorAll(\".btn\");\r\n    const handleStatus=(answer)=>{\r\n        optionButtons.forEach(button=>{\r\n            button.classList.remove(\"btn-hove\");\r\n            button.disabled=true;\r\n        });\r\n        let selectedButton=document.querySelector(\".display\");\r\n        if(answer===questionData.name){\r\n            selectedButton.classList.add(\"correct\");\r\n            selectedButton.classList.remove(\"btn\");\r\n        }else{\r\n            selectedButton.classList.add(\"incorrect\");\r\n            selectedButton.classList.remove(\"btn\");\r\n        }   \r\n    }\r\n    const newQuestion = () => {\r\n        handleNext();\r\n        checkanswer();\r\n        setStatus(false);\r\n        optionButtons.forEach(button=>{\r\n            button.classList.add(\"btn-hove\");\r\n        });\r\n    }\r\n    return (\r\n        <div className=\"QuestionCard\">\r\n            <h1>Country Quiz</h1>\r\n            <div>\r\n                {(choice===1)\r\n                    ? (\r\n                        <p><img className=\"flag-img\" src={questionData.flag} alt=\"flag\" /> <br/>is flag of which Country?</p>\r\n                    )\r\n                    : (\r\n                        <p>{questionData.capital} is capital of which Country?</p>\r\n                    )\r\n                    }\r\n                {options.map(val => {\r\n                    return (\r\n                        <div key={val}>\r\n                            <button className=\"btn btn-hove\" onClick={(e) => {\r\n                                setAnswer(val);\r\n                                setStatus(true);\r\n                                e.target.classList.add(\"display\");\r\n                            }}>{val}</button>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            {\r\n                answerStatus\r\n                    ? (<div>\r\n                        {handleStatus(answer)}\r\n                        <button className={questionNo<10 ?'btn2':'btn btn-hove'} onClick={newQuestion}>{questionNo<10?<span>Next</span>:<span>Check Result</span>}</button>\r\n                    </div>)\r\n                    : \" \"\r\n            }\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/undraw_winners_ao2o 2.d76bfdf8.svg\";","import React from 'react';\r\nimport './App.css';\r\nimport victoryImage from './undraw_winners_ao2o 2.svg'\r\n\r\nexport default function Result({correctAns,setCorrect,setQuestion_no}){\r\n    const handleStart=()=>{\r\n        setCorrect(0);\r\n        setQuestion_no(1);\r\n    }\r\n    return (\r\n        <div className=\"result\">\r\n            <img src={victoryImage} alt=\"winners\"/>\r\n            <h1>Your Score: {correctAns}</h1>\r\n            <button className=\"btn btn-hove\" onClick={handleStart}>Restart Test</button>\r\n        </div>\r\n    );\r\n}","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QuestionCard from './QuestionCard';\nimport Result from './Result';\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nfunction App() {\n  const [next, setNext] = useState(false);\n  const [questionData, setData] = useState([]);\n  const [options, setOption] = useState([]);\n  const [questionNo, setQuestion_no] = useState(1);\n  const [correctAns, setCorrect] = useState(0);\n  const [choice, setChoice] = useState(1);\n  useEffect(() => {\n    let val, rand;\n    axios.get(\"https://restcountries.eu/rest/v2/all\")\n      .then(res => {\n        val = res.data;\n        rand = Math.floor(Math.random() * 250 + 1);\n        setData(val[rand]);\n        let newOption = [];\n        newOption.push(val[rand].name);\n        while (newOption.length < 4) {\n          let x = Math.floor(Math.random() * 250 + 1);\n          if (newOption.indexOf(val[x].name) === -1)\n            newOption.push(val[x].name);\n        }\n        setOption(shuffle(newOption));\n        let randomChoice = Math.floor(Math.random() * 2 + 1);\n        setChoice(randomChoice);\n      })\n  }, [next, questionNo]);\n  const handleNext = () => {\n    setNext(!next);\n    setQuestion_no(questionNo + 1);\n  }\n  const updateCorrect = () => {\n    setCorrect(correctAns + 1);\n  }\n  return (\n    <div className=\"App\">\n      {questionNo < 11\n        ? (\n          <QuestionCard\n            options={options}\n            questionData={questionData}\n            updateCorrect={updateCorrect}\n            handleNext={handleNext}\n            choice={choice}\n            questionNo={questionNo}\n          />)\n        : (\n          <Result\n            correctAns={correctAns}\n            setQuestion_no={setQuestion_no}\n            setCorrect={setCorrect}\n          />)\n      }\n      <footer>\n        <h2>With ❤️ : Yuvi</h2>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}